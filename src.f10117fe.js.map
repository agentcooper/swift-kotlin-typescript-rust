{"version":3,"sources":["src/examples.ts","node_modules/lz-string/libs/lz-string.js","src/playground.ts","src/index.ts"],"names":[],"mappings":";ACAA;AACA;AACA;AACA;AACA;AACA,ADLA,IAAA,IAAA,GAAA,OAAA,CAAA,IAAA,CAAA;ACMA,ADWA;ACVA;AACA;AACA;AACA;AACA,ADSa,OAAA,CAAA,QAAA,GAAsB,CACjC;ACTF,ADUI,EAAA,GAAG,EAAE,6BADP;ACRF,ADUI,AGvBJ,EHuBI,EGvBJ,GHuBS,EAAE,KGvBX,GAAA,OAAA,CAAA,YAAA,CHqBE,AGrBF;AFcA,ADUI,EAAA,IAAI,EAAE;ACTV,ADUM,AGpBN,ADLA,IFyBM,AGpBN,ADLA,KFyBW,GEzBX,GAAA,CCKA,GAAA,OAAA,CAAA,ADLA,CAAA,OAAA,CAAA,KCKA,CAAA,KDLA,CAAA,CAAA,qdFwBU;ACRV,ADcM,IAAA,MAAM,oeANF;ACPV,ADkBM,AG5BN,ADLa,IFiCP,AG5BA,GDLO,CAAA,MFiCG,EG5BE,EDLL,CCKQ,EDLK,MCKG,CAAC,aAAT,CAEnB,WAFmB,CAArB,8eHiBU;ACNV,ADsBM,AG7BN,ADRE,EAAA,EFqCI,IAAI,AErCF,EAAE,ECQG,CAAC,SAAd,GAA0B,CDRf,IAAD,KCQgB,CAAA,QAAA,CACvB,GADuB,CAEtB,UAAA,OAAO;AFMX,ADKU,AGXC,ADVD,mCCWc,OAAO,CAAC,GADrB,IDTyB,IAAI,CAClC,IAAI,CAAC,ECUH,OAAO,ADVT,CCUU,ADVK,KCQV;AFOX,ADCE,AGRS,ADRY,CFeY,AGTT,EHoCxB,AG7BC,GDboB,CCMG,CAOlB,EDbmB,ECMD,ADNH,CCMvB;AFUA,AD2BI,AE3CiB,EF2CjB,GAAG,AE3CD,CADkC,CF4C/B,AE7CC,wBF4CR;ACzBF,AD2BI,AG7BJ,ADjBU,EF8CN,CE/CsB,IF+CjB,EAAE,AG7BF,WAAT,CACE,UADF,EH2BE,AG1BkB;AFEpB,AD2BI,AG3BF,ADfA,EF0CE,AE1CF,IF0CM,AG3BA,CDfD,CF0CG,CE1CD,ICeM,GAAG,QDfR,ECeQ,CAAA,CDfT,OCeS,CAAS,IAAT,CACd,UAAA,OAAO;AFAX,AD2BM,AG3BK,ADhBF,IF2CH,KAAK,EG3BI,OAAO,CAAC,GAAR,KAAgB,UAApB,6CDfyD,kBAAkB,CAChF,IADgF,CAD7E,4JF0CC;ACzBV,AD+BM,AGhCK,ADhBF,GCeS,ADrBQ,CFsDpB,AGjCJ,MHiCU,uSANF;ACxBV,ADmCM,AEhDJ,EAAA,EFgDI,QEhDM,EFgDI,AEhDF,oBAAC,IAAD,mOFqCJ;ACvBV,ADuCM,AGvCJ,ADdY,IFqDR,EGvCA,CAAC,CHuCG,MGvCR,EAAc,0CDb4B,QAAQ,CAAC,6BAAT,CACtC,IADsC,CAD9B;ADed,ADsBU,AGtBN,ADfU,GAXY,OC0BhB,IAAI,KAAJ,qBACQ,UADR,mBAAN;AFCJ,ADkBE,AGhBC,ADbD,CFEiC,CEFjC,CFuDA,GEvDI,EAAE,cAAC,IAAD;ADYR,AD4CI,AExDI,EFwDJ,GAAG,EAAE,sBADP,gEEtD6E,kBAAkB,CAC3F,IAD2F,CADzF;ADaR,AD4CI,AG1CF,ADfM,EFyDJ,KAAK,EAAE,AG1CF,OAAP,eHwCA;ACzCF,AD4CI,AG1CH,ADhCyB,CAAb,CF0ET,IAAI,EAAE;AC3CV,AD4CM,IAAA,KAAK,meADD;AC1CV,ADgDM,AG9CN,IH8CM,MAAM,EG9CC,CAAC,gBAAd,CACE,QADF,EAEE,UAAA,KAAK,EAAG,yfHsCA;ACzCV,ADoDM,AGhDF,IHgDE,EGhDI,QHgDM,EGhDI,GACd,KAAK,CAAC,MAD8B,CAEnC,KAFH,+wBHqCM;ACxCV,ADwDM,AGlDF,EAAA,EHkDE,IAAI,AGlDA,CAAC,WAAW,CAAC,UAAD,CAAZ,CAAN;AFLJ,ADuCU,AGjCP,CAPH;AFEA,ADmCE,CArDiC,CAAtB;ACmBb,AEOA,SAAS,MAAT,CAAgB,OAAhB,EAAgC;AFNhC,AEOE,qCAGK,MAAM,CAAC,OAAP,CAAe,OAAO,CAAC,IAAvB,CAHL,qCAGmC;AFTrC,AESqC;AFRrC,AEQqC,QAFjC,QAEiC;AFPrC,AEOqC,QADjC,WACiC;AFNrC;AACA,AEMI,QAAM,IAAI,GAAG,QAAQ,CAAC,aAAT,YACP,QADO,EAAb;AFLJ,AESI,QAAM,IAAI,GAAG,IAAK,CAAC,aAAN,CAAoB,OAApB,CAAb;AFRJ,AESI,IAAA,IAAK,CAAC,WAAN,GAAoB,WAApB;AFRJ,AEUI,QAAM,MAAM,GAAG,IAAK,CAAC,aAAN,CAEb,kBAFa,CAAf;AFTJ;AACA,AEWI,QAAI,MAAJ,EAAY;AFVhB,AEWM,MAAA,MAAM,CAAC,IAAP,GAAc,YAAA,CAAA,UAAA,CACZ,QADY,EAEZ,WAFY,CAAd;AFVN,AEaK;AFZL,AEaG;AFZH;AACA,AEaE,EAAA,YAAa,CAAC,KAAd,GAAsB,OAAO,CAAC,GAA9B;AFZF,AEaE,EAAA,QAAQ,CAAC,IAAT,GAAgB,OAAO,CAAC,GAAxB;AFZF,AEaC;AFZD;AACA,AEaA,IAAI,QAAQ,CAAC,IAAb,EAAmB;AFZnB,AEaE,MAAM,UAAU,GAAG,QAAQ,CAAC,IAAT,CAAc,KAAd,CAAoB,CAApB,CAAnB;AFZF,AEaE,EAAA,MAAM,CAAC,WAAW,CAAC,UAAD,CAAZ,CAAN;AFZF,AEaC,CAHD,MAGO;AFZP,AEaE,EAAA,MAAM,CAAC,UAAA,CAAA,QAAA,CAAS,CAAT,CAAD,CAAN;AFZF,AEafile":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["import { readFileSync } from \"fs\";\n\ninterface Code {\n  swift: string;\n  kotlin: string;\n  typescript: string;\n  rust: string;\n}\n\nexport type Languages = keyof Code;\n\nexport interface Example {\n  key: string;\n  title: string;\n  code: Code;\n}\n\n/**\n * readFileSync calls are resolved statically by Parcel\n */\nexport const examples: Example[] = [\n  {\n    key: \"protocols-interfaces-traits\",\n    title: \"Protocols/interfaces/traits\",\n    code: {\n      swift: readFileSync(\n        __dirname +\n          \"/../examples/protocols-interfaces-traits/stack.swift\",\n        \"utf-8\"\n      ),\n      kotlin: readFileSync(\n        __dirname +\n          \"/../examples/protocols-interfaces-traits/stack.kt\",\n        \"utf-8\"\n      ),\n      typescript: readFileSync(\n        __dirname +\n          \"/../examples/protocols-interfaces-traits/stack.ts\",\n        \"utf-8\"\n      ),\n      rust: readFileSync(\n        __dirname +\n          \"/../examples/protocols-interfaces-traits/stack.rs\",\n        \"utf-8\"\n      )\n    }\n  },\n  {\n    key: \"higher-order-functions\",\n    title: \"Higher-order functions\",\n    code: {\n      swift: readFileSync(\n        __dirname +\n          \"/../examples/higher-order-functions/map.swift\",\n        \"utf-8\"\n      ),\n      kotlin: readFileSync(\n        __dirname +\n          \"/../examples/higher-order-functions/map.kt\",\n        \"utf-8\"\n      ),\n      typescript: readFileSync(\n        __dirname +\n          \"/../examples/higher-order-functions/map.ts\",\n        \"utf-8\"\n      ),\n      rust: readFileSync(\n        __dirname +\n          \"/../examples/higher-order-functions/map.rs\",\n        \"utf-8\"\n      )\n    }\n  },\n  {\n    key: \"algebraic-data-types\",\n    title: \"Algebraic data types\",\n    code: {\n      swift: readFileSync(\n        __dirname +\n          \"/../examples/algebraic-data-types/algebraic-data-types.swift\",\n        \"utf-8\"\n      ),\n      kotlin: readFileSync(\n        __dirname +\n          \"/../examples/algebraic-data-types/algebraic-data-types.kt\",\n        \"utf-8\"\n      ),\n      typescript: readFileSync(\n        __dirname +\n          \"/../examples/algebraic-data-types/algebraic-data-types.ts\",\n        \"utf-8\"\n      ),\n      rust: readFileSync(\n        __dirname +\n          \"/../examples/algebraic-data-types/algebraic-data-types.rs\",\n        \"utf-8\"\n      )\n    }\n  }\n];\n","// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>\n// This work is free. You can redistribute it and/or modify it\n// under the terms of the WTFPL, Version 2\n// For more information see LICENSE.txt or http://www.wtfpl.net/\n//\n// For more information, the home page:\n// http://pieroxy.net/blog/pages/lz-string/testing.html\n//\n// LZ-based compression algorithm, version 1.4.4\nvar LZString = (function() {\n\n// private property\nvar f = String.fromCharCode;\nvar keyStrBase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nvar keyStrUriSafe = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\";\nvar baseReverseDic = {};\n\nfunction getBaseValue(alphabet, character) {\n  if (!baseReverseDic[alphabet]) {\n    baseReverseDic[alphabet] = {};\n    for (var i=0 ; i<alphabet.length ; i++) {\n      baseReverseDic[alphabet][alphabet.charAt(i)] = i;\n    }\n  }\n  return baseReverseDic[alphabet][character];\n}\n\nvar LZString = {\n  compressToBase64 : function (input) {\n    if (input == null) return \"\";\n    var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});\n    switch (res.length % 4) { // To produce valid Base64\n    default: // When could this happen ?\n    case 0 : return res;\n    case 1 : return res+\"===\";\n    case 2 : return res+\"==\";\n    case 3 : return res+\"=\";\n    }\n  },\n\n  decompressFromBase64 : function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });\n  },\n\n  compressToUTF16 : function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 15, function(a){return f(a+32);}) + \" \";\n  },\n\n  decompressFromUTF16: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });\n  },\n\n  //compress into uint8array (UCS-2 big endian format)\n  compressToUint8Array: function (uncompressed) {\n    var compressed = LZString.compress(uncompressed);\n    var buf=new Uint8Array(compressed.length*2); // 2 bytes per character\n\n    for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {\n      var current_value = compressed.charCodeAt(i);\n      buf[i*2] = current_value >>> 8;\n      buf[i*2+1] = current_value % 256;\n    }\n    return buf;\n  },\n\n  //decompress from uint8array (UCS-2 big endian format)\n  decompressFromUint8Array:function (compressed) {\n    if (compressed===null || compressed===undefined){\n        return LZString.decompress(compressed);\n    } else {\n        var buf=new Array(compressed.length/2); // 2 bytes per character\n        for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {\n          buf[i]=compressed[i*2]*256+compressed[i*2+1];\n        }\n\n        var result = [];\n        buf.forEach(function (c) {\n          result.push(f(c));\n        });\n        return LZString.decompress(result.join(''));\n\n    }\n\n  },\n\n\n  //compress into a string that is already URI encoded\n  compressToEncodedURIComponent: function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});\n  },\n\n  //decompress from an output of compressToEncodedURIComponent\n  decompressFromEncodedURIComponent:function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    input = input.replace(/ /g, \"+\");\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });\n  },\n\n  compress: function (uncompressed) {\n    return LZString._compress(uncompressed, 16, function(a){return f(a);});\n  },\n  _compress: function (uncompressed, bitsPerChar, getCharFromInt) {\n    if (uncompressed == null) return \"\";\n    var i, value,\n        context_dictionary= {},\n        context_dictionaryToCreate= {},\n        context_c=\"\",\n        context_wc=\"\",\n        context_w=\"\",\n        context_enlargeIn= 2, // Compensate for the first entry which should not count\n        context_dictSize= 3,\n        context_numBits= 2,\n        context_data=[],\n        context_data_val=0,\n        context_data_position=0,\n        ii;\n\n    for (ii = 0; ii < uncompressed.length; ii += 1) {\n      context_c = uncompressed.charAt(ii);\n      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {\n        context_dictionary[context_c] = context_dictSize++;\n        context_dictionaryToCreate[context_c] = true;\n      }\n\n      context_wc = context_w + context_c;\n      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {\n        context_w = context_wc;\n      } else {\n        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n          if (context_w.charCodeAt(0)<256) {\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<8 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          } else {\n            value = 1;\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1) | value;\n              if (context_data_position ==bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = 0;\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<16 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          }\n          context_enlargeIn--;\n          if (context_enlargeIn == 0) {\n            context_enlargeIn = Math.pow(2, context_numBits);\n            context_numBits++;\n          }\n          delete context_dictionaryToCreate[context_w];\n        } else {\n          value = context_dictionary[context_w];\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n\n\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        // Add wc to the dictionary.\n        context_dictionary[context_wc] = context_dictSize++;\n        context_w = String(context_c);\n      }\n    }\n\n    // Output the code for w.\n    if (context_w !== \"\") {\n      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n        if (context_w.charCodeAt(0)<256) {\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<8 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        } else {\n          value = 1;\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | value;\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = 0;\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<16 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        delete context_dictionaryToCreate[context_w];\n      } else {\n        value = context_dictionary[context_w];\n        for (i=0 ; i<context_numBits ; i++) {\n          context_data_val = (context_data_val << 1) | (value&1);\n          if (context_data_position == bitsPerChar-1) {\n            context_data_position = 0;\n            context_data.push(getCharFromInt(context_data_val));\n            context_data_val = 0;\n          } else {\n            context_data_position++;\n          }\n          value = value >> 1;\n        }\n\n\n      }\n      context_enlargeIn--;\n      if (context_enlargeIn == 0) {\n        context_enlargeIn = Math.pow(2, context_numBits);\n        context_numBits++;\n      }\n    }\n\n    // Mark the end of the stream\n    value = 2;\n    for (i=0 ; i<context_numBits ; i++) {\n      context_data_val = (context_data_val << 1) | (value&1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data_position = 0;\n        context_data.push(getCharFromInt(context_data_val));\n        context_data_val = 0;\n      } else {\n        context_data_position++;\n      }\n      value = value >> 1;\n    }\n\n    // Flush the last char\n    while (true) {\n      context_data_val = (context_data_val << 1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data.push(getCharFromInt(context_data_val));\n        break;\n      }\n      else context_data_position++;\n    }\n    return context_data.join('');\n  },\n\n  decompress: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });\n  },\n\n  _decompress: function (length, resetValue, getNextValue) {\n    var dictionary = [],\n        next,\n        enlargeIn = 4,\n        dictSize = 4,\n        numBits = 3,\n        entry = \"\",\n        result = [],\n        i,\n        w,\n        bits, resb, maxpower, power,\n        c,\n        data = {val:getNextValue(0), position:resetValue, index:1};\n\n    for (i = 0; i < 3; i += 1) {\n      dictionary[i] = i;\n    }\n\n    bits = 0;\n    maxpower = Math.pow(2,2);\n    power=1;\n    while (power!=maxpower) {\n      resb = data.val & data.position;\n      data.position >>= 1;\n      if (data.position == 0) {\n        data.position = resetValue;\n        data.val = getNextValue(data.index++);\n      }\n      bits |= (resb>0 ? 1 : 0) * power;\n      power <<= 1;\n    }\n\n    switch (next = bits) {\n      case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 2:\n        return \"\";\n    }\n    dictionary[3] = c;\n    w = c;\n    result.push(c);\n    while (true) {\n      if (data.index > length) {\n        return \"\";\n      }\n\n      bits = 0;\n      maxpower = Math.pow(2,numBits);\n      power=1;\n      while (power!=maxpower) {\n        resb = data.val & data.position;\n        data.position >>= 1;\n        if (data.position == 0) {\n          data.position = resetValue;\n          data.val = getNextValue(data.index++);\n        }\n        bits |= (resb>0 ? 1 : 0) * power;\n        power <<= 1;\n      }\n\n      switch (c = bits) {\n        case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 2:\n          return result.join('');\n      }\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n      if (dictionary[c]) {\n        entry = dictionary[c];\n      } else {\n        if (c === dictSize) {\n          entry = w + w.charAt(0);\n        } else {\n          return null;\n        }\n      }\n      result.push(entry);\n\n      // Add w+entry[0] to the dictionary.\n      dictionary[dictSize++] = w + entry.charAt(0);\n      enlargeIn--;\n\n      w = entry;\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n    }\n  }\n};\n  return LZString;\n})();\n\nif (typeof define === 'function' && define.amd) {\n  define(function () { return LZString; });\n} else if( typeof module !== 'undefined' && module != null ) {\n  module.exports = LZString\n}\n","import * as LZString from \"lz-string\";\n\nexport const playground = {\n  kotlin: (code: string) =>\n    `https://play.kotlinlang.org/#${btoa(\n      JSON.stringify({ code })\n    )}`,\n\n  swift: (code: string) =>\n    `http://online.swiftplayground.run/?sourceURL=data:text/plain,${encodeURIComponent(\n      code\n    )}`,\n\n  typescript: (code: string) =>\n    `https://typescript-play.js.org/#code/${LZString.compressToEncodedURIComponent(\n      code\n    )}`,\n\n  rust: (code: string) =>\n    `https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=${encodeURIComponent(\n      code\n    )}`\n};\n","import {\n  examples,\n  Example,\n  Languages\n} from \"./examples\";\nimport { playground } from \"./playground\";\n\nconst examplesNode = document.querySelector<\n  HTMLSelectElement\n>(\"#examples\");\n\nexamplesNode!.innerHTML = examples\n  .map(\n    example =>\n      `<option value=\"${example.key}\">${\n        example.title\n      }</option>`\n  )\n  .join(\"\\n\");\n\nfunction findExample(\n  exampleKey: string\n): Example {\n  const example = examples.find(\n    example => example.key === exampleKey\n  );\n\n  if (!example) {\n    throw new Error(\n      `Example \"${exampleKey}\" not found.`\n    );\n  }\n\n  return example;\n}\n\nexamplesNode!.addEventListener(\n  \"change\",\n  event => {\n    const exampleKey = (<HTMLInputElement>(\n      event.target\n    )).value;\n    render(findExample(exampleKey));\n  }\n);\n\nfunction render(example: Example) {\n  for (const [\n    language,\n    fileContent\n  ] of Object.entries(example.code)) {\n    const node = document.querySelector(\n      `#${language}`\n    );\n\n    const code = node!.querySelector(\".code\");\n    code!.textContent = fileContent;\n\n    const anchor = node!.querySelector<\n      HTMLAnchorElement\n    >(\".playground-link\");\n    if (anchor) {\n      anchor.href = playground[\n        language as Languages\n      ](fileContent);\n    }\n  }\n\n  examplesNode!.value = example.key;\n  location.hash = example.key;\n}\n\nif (location.hash) {\n  const exampleKey = location.hash.slice(1);\n  render(findExample(exampleKey));\n} else {\n  render(examples[0]);\n}\n"]}