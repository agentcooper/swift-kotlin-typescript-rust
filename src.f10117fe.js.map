{"version":3,"sources":["src/examples.ts","src/playground.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["import { readFileSync } from \"fs\";\n\ninterface Code {\n  swift: string;\n  typescript: string;\n  rust: string;\n}\n\nexport type Languages = keyof Code;\n\nexport interface Example {\n  key: string;\n  title: string;\n  code: Code;\n}\n\n/**\n * readFileSync calls are resolved statically by Parcel\n */\nexport const examples: Example[] = [\n  {\n    key: \"protocols-interfaces-traits\",\n    title: \"Protocols/interfaces/traits\",\n    code: {\n      swift: readFileSync(\n        __dirname +\n          \"/../examples/protocols-interfaces-traits/stack.swift\",\n        \"utf-8\"\n      ),\n      typescript: readFileSync(\n        __dirname +\n          \"/../examples/protocols-interfaces-traits/stack.ts\",\n        \"utf-8\"\n      ),\n      rust: readFileSync(\n        __dirname +\n          \"/../examples/protocols-interfaces-traits/stack.rs\",\n        \"utf-8\"\n      )\n    }\n  },\n  {\n    key: \"algebraic-data-types\",\n    title: \"Algebraic data types\",\n    code: {\n      swift: readFileSync(\n        __dirname +\n          \"/../examples/algebraic-data-types/algebraic-data-types.swift\",\n        \"utf-8\"\n      ),\n      typescript: readFileSync(\n        __dirname +\n          \"/../examples/algebraic-data-types/algebraic-data-types.ts\",\n        \"utf-8\"\n      ),\n      rust: readFileSync(\n        __dirname +\n          \"/../examples/algebraic-data-types/algebraic-data-types.rs\",\n        \"utf-8\"\n      )\n    }\n  }\n];\n","export const playground = {\n  rust: code =>\n    `https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=${encodeURIComponent(\n      code\n    )}`,\n\n  typescript: code =>\n    `https://www.typescriptlang.org/play/index.html#src=${encodeURIComponent(\n      code\n    )}`,\n\n  swift: code =>\n    `http://online.swiftplayground.run/?sourceURL=data:text/plain,${encodeURIComponent(\n      code\n    )}`\n};\n","import {\n  examples,\n  Example,\n  Languages\n} from \"./examples\";\nimport { playground } from \"./playground\";\n\nconst examplesNode = document.querySelector<\n  HTMLSelectElement\n>(\"#examples\");\n\nexamplesNode!.innerHTML = examples\n  .map(\n    example =>\n      `<option value=\"${example.key}\">${\n        example.title\n      }</option>`\n  )\n  .join(\"\\n\");\n\nfunction findExample(\n  exampleKey: string\n): Example {\n  const example = examples.find(\n    example => example.key === exampleKey\n  );\n\n  if (!example) {\n    throw new Error(\n      `Example \"${exampleKey}\" not found.`\n    );\n  }\n\n  return example;\n}\n\nexamplesNode!.addEventListener(\n  \"change\",\n  event => {\n    const exampleKey = (<HTMLInputElement>(\n      event.target\n    )).value;\n    render(findExample(exampleKey));\n  }\n);\n\nfunction render(example: Example) {\n  for (const [\n    language,\n    fileContent\n  ] of Object.entries(example.code)) {\n    const node = document.querySelector(\n      `#${language}`\n    );\n\n    const code = node!.querySelector(\".code\");\n    code!.textContent = fileContent;\n\n    const anchor = node!.querySelector<\n      HTMLAnchorElement\n    >(\".playground-link\");\n    if (anchor) {\n      anchor.href = playground[\n        language as Languages\n      ](fileContent);\n    }\n  }\n\n  examplesNode!.value = example.key;\n  location.hash = example.key;\n}\n\nif (location.hash) {\n  const exampleKey = location.hash.slice(1);\n  render(findExample(exampleKey));\n} else {\n  render(examples[0]);\n}\n"]}