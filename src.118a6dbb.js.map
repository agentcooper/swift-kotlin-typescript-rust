{"version":3,"sources":["src/examples.ts","src/playground.ts","src/index.ts"],"names":[],"mappings":";;;AAmBa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAnBb,IAAA,EAAA,QAAA,MAmBa,QAAA,SAAsB,CACjC,CACE,IAAK,8BACL,MAAO,8BACP,KAAM,CACJ,MADI,4fAMJ,WANI,qhBAWJ,KAAI,goBAOR,CACE,IAAK,uBACL,MAAO,uBACP,KAAM,CACJ,MADI,keAMJ,WANI,qyBAWJ,KAAI;;ACvDG,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAa,CACxB,KAAM,SAAA,GACuE,MAAA,2EAAA,OAAA,mBACzE,KAGJ,WAAY,SAAA,GAC4C,MAAA,sDAAA,OAAA,mBACpD,KAGJ,MAAO,SAAA,GAC2D,MAAA,gEAAA,OAAA,mBAC9D;;ACgEL,aAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wDAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA7ED,IAAA,EAAA,QAAA,cAKA,EAAA,QAAA,gBAEM,EAAe,SAAS,cAE5B,aAWF,SAAS,EACP,GAEM,IAAA,EAAU,EAAA,SAAS,KACvB,SAAA,GAAW,OAAA,EAAQ,MAAQ,IAGzB,IAAC,EACG,MAAA,IAAI,MACI,YAAA,OAAA,EADd,iBAKK,OAAA,EAaT,SAAS,EAAO,GAIT,IAAA,IAAA,EAAA,EAAA,EAAA,OAAO,QAAQ,EAAQ,MAAO,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAFjC,EAEiC,EAAA,GADjC,EACiC,EAAA,GAC3B,EAAO,SAAS,cAChB,IAAA,OAAA,IAGO,EAAM,cAAc,SAC3B,YAAc,EAEd,IAAA,EAAS,EAAM,cAEnB,oBACE,IACF,EAAO,KAAO,EAAA,WACZ,GACA,IAIN,EAAc,MAAQ,EAAQ,IAC9B,SAAS,KAAO,EAAQ,IAG1B,GA7DA,EAAc,UAAY,EAAA,SACvB,IACC,SAAA,GACoB,MAAA,kBAAA,OAAA,EAAQ,IACxB,MAAA,OAAA,EAAQ,MAFL,eAKR,KAAK,MAkBR,EAAc,iBACZ,SACA,SAAA,GAIE,EAAO,EAFL,EAAM,OACL,UA+BH,SAAS,KAAM,CACX,IAAA,EAAa,SAAS,KAAK,MAAM,GACvC,EAAO,EAAY,SAEnB,EAAO,EAAA,SAAS","file":"src.118a6dbb.js","sourceRoot":"..","sourcesContent":["import { readFileSync } from \"fs\";\n\ninterface Code {\n  swift: string;\n  typescript: string;\n  rust: string;\n}\n\nexport type Languages = keyof Code;\n\nexport interface Example {\n  key: string;\n  title: string;\n  code: Code;\n}\n\n/**\n * readFileSync calls are resolved statically by Parcel\n */\nexport const examples: Example[] = [\n  {\n    key: \"protocols-interfaces-traits\",\n    title: \"Protocols/interfaces/traits\",\n    code: {\n      swift: readFileSync(\n        __dirname +\n          \"/../examples/protocols-interfaces-traits/stack.swift\",\n        \"utf-8\"\n      ),\n      typescript: readFileSync(\n        __dirname +\n          \"/../examples/protocols-interfaces-traits/stack.ts\",\n        \"utf-8\"\n      ),\n      rust: readFileSync(\n        __dirname +\n          \"/../examples/protocols-interfaces-traits/stack.rs\",\n        \"utf-8\"\n      )\n    }\n  },\n  {\n    key: \"algebraic-data-types\",\n    title: \"Algebraic data types\",\n    code: {\n      swift: readFileSync(\n        __dirname +\n          \"/../examples/algebraic-data-types/algebraic-data-types.swift\",\n        \"utf-8\"\n      ),\n      typescript: readFileSync(\n        __dirname +\n          \"/../examples/algebraic-data-types/algebraic-data-types.ts\",\n        \"utf-8\"\n      ),\n      rust: readFileSync(\n        __dirname +\n          \"/../examples/algebraic-data-types/algebraic-data-types.rs\",\n        \"utf-8\"\n      )\n    }\n  }\n];\n","export const playground = {\n  rust: code =>\n    `https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=${encodeURIComponent(\n      code\n    )}`,\n\n  typescript: code =>\n    `https://www.typescriptlang.org/play/index.html#src=${encodeURIComponent(\n      code\n    )}`,\n\n  swift: code =>\n    `http://online.swiftplayground.run/?sourceURL=data:text/plain,${encodeURIComponent(\n      code\n    )}`\n};\n","import {\n  examples,\n  Example,\n  Languages\n} from \"./examples\";\nimport { playground } from \"./playground\";\n\nconst examplesNode = document.querySelector<\n  HTMLSelectElement\n>(\"#examples\");\n\nexamplesNode!.innerHTML = examples\n  .map(\n    example =>\n      `<option value=\"${example.key}\">${\n        example.title\n      }</option>`\n  )\n  .join(\"\\n\");\n\nfunction findExample(\n  exampleKey: string\n): Example {\n  const example = examples.find(\n    example => example.key === exampleKey\n  );\n\n  if (!example) {\n    throw new Error(\n      `Example \"${exampleKey}\" not found.`\n    );\n  }\n\n  return example;\n}\n\nexamplesNode!.addEventListener(\n  \"change\",\n  event => {\n    const exampleKey = (<HTMLInputElement>(\n      event.target\n    )).value;\n    render(findExample(exampleKey));\n  }\n);\n\nfunction render(example: Example) {\n  for (const [\n    language,\n    fileContent\n  ] of Object.entries(example.code)) {\n    const node = document.querySelector(\n      `#${language}`\n    );\n\n    const code = node!.querySelector(\".code\");\n    code!.textContent = fileContent;\n\n    const anchor = node!.querySelector<\n      HTMLAnchorElement\n    >(\".playground-link\");\n    if (anchor) {\n      anchor.href = playground[\n        language as Languages\n      ](fileContent);\n    }\n  }\n\n  examplesNode!.value = example.key;\n  location.hash = example.key;\n}\n\nif (location.hash) {\n  const exampleKey = location.hash.slice(1);\n  render(findExample(exampleKey));\n} else {\n  render(examples[0]);\n}\n"]}